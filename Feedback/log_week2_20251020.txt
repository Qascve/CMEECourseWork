======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Zhou Yang

Processing week 2

Your current Git repo size is about 2.95 MiB on disk

Found directories: .git, week1, week4, week2, Feedback, week3
Found files: .gitignore, README.md

Processing week 2: week2

Found 23 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: MyExampleScript.py

Contents:

**********
def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)
**********

Output (first 500 chars):

**********
4

**********
No errors.
======================================================================
Script: lc2.py

Contents:

**********
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
heavy_rain = [item for item in rainfall if item[1] > 100]
print (">100mm" , str(heavy_rain))

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

light_rain = [item[0] for item in rainfall if item[1] < 50]
print ( "less than 50 mm", str(light_rain))

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

heavy_rain = [] # create list for month,rainfall tuples where the amount of rain was greater than 100 mm
for item in rainfall:
    if item[1] > 100: # item[1] is the rainfall value
        heavy_rain.append(item) # append the whole tuple
print (">100mm" , str(heavy_rain))

light_rain = [] # create list for month names where the amount of rain was less than 50 mm
for item in rainfall:
    if item[1] < 50:
        light_rain.append(item[0]) # item[0] is the month name, append just the month name
print ( "less than 50 mm", str(light_rain))

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********

Output (first 500 chars):

**********
>100mm [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
less than 50 mm ['MAR', 'SEP']
>100mm [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
less than 50 mm ['MAR', 'SEP']

**********
No errors.
======================================================================
Script: oaks.py

Contents:

**********
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

## Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

## Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********

Output (first 500 chars):

**********
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}

**********
No errors.
======================================================================
Script: dictionary.py

Contents:

**********
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here #### 
taxa_dic = {}
for item in taxa:
    species = item[0]
    order = item[1]
    if order not in taxa_dic:
        taxa_dic[order] = set()  # Initialize a new set for this order
    taxa_dic[order].add(species)  # Add the species to the set for this order

print(taxa_dic)

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 

comprehension_taxa_dic = {}
{comprehension_taxa_dic.setdefault(item[1], set()).add(item[0]) for item in taxa} # Set item[1] as key, add item[0] to the set at that key

print(comprehension_taxa_dic)
**********

Output (first 500 chars):

**********
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Gerbillus henleyi', 'Mus domesticus', 'Cleithrionomys rutilus', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Lyacon pictus', 'Canis lupus', 'Arctocephalus gazella'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Gerbillus henleyi', 'Mus domesticus', 'Cleithrionomys rutilus', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Lyacon pictus
**********
No errors.
======================================================================
Script: cfexercises2.py

Contents:

**********

########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: # while x is True
        print("hello! " + str(y))
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)

**********

Output (first 500 chars):

**********
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********
No errors.
======================================================================
Script: using_name.py

Contents:

**********
# !/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself!')
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)

**********

Output (first 500 chars):

**********
This program is being run by itself!
This module's name is: __main__

**********
No errors.
======================================================================
Script: basic_io3.py

Contents:

**********
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/basic_io3.py", line 9, in <module>
    f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

**********
======================================================================
Script: scope.py

Contents:

**********
# scope.py

# Local variables and function scope

i = 1
x = 0
for i in range(10):
    x += 1
print(i)  # 9
print(x)  # 10

i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x

a_function(10)
print(i)  # still 1
print(x)  # still 0

# explicitly reassign the result to x
x = a_function(10)
print("Updated x after reassignment:", x)

# Global variables

_a_global = 10  # a global variable

if _a_global >= 5:
    _b_global = _a_global + 5  # also global

print("Before calling a_function, outside the function, _a_global =", _a_global)
print("Before calling a_function, outside the function, _b_global =", _b_global)

def a_function():
    _a_global = 4  # local variable
    if _a_global >= 4:
        _b_global = _a_global + 5  # local variable
    _a_local = 3
    print("Inside function, _a_global =", _a_global)
    print("Inside function, _b_global =", _b_global)
    print("Inside function, _a_local =", _a_local)

a_function()

print("After calling a_function, outside, _a_global (still) =", _a_global)
print("After calling a_function, outside, _b_global (still) =", _b_global)
try:
    print("After calling a_function, outside, _a_local =", _a_local)
except NameError as e:
    print("NameError:", e)


_a_global = 10
def a_function():
    _a_local = 4
    print("Inside function, _a_local =", _a_local)
    print("Inside function, _a_global =", _a_global)

a_function()
print("Outside function, _a_global =", _a_global)

# Modifying a global variable by 'global' keyword
_a_global = 10
print("Before calling a_function, outside, _a_global =", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    print("Inside function, _a_global =", _a_global)
    print("Inside function, _a_local =", _a_local)

a_function()
print("After calling a_function, outside, _a_global now =", _a_global)
def a_function():
    _a_global = 10
    def _a_function2():
        global _a_global
        _a_global = 20
    print("Before calling _a_function2, _a_global =", _a_global)
    _a_function2()
    print("After calling _a_function2, _a_global =", _a_global)

a_function()
print("In main namespace, _a_global =", _a_global)

_a_global = 10
def a_function():
    def _a_function2():
        global _a_global
        _a_global = 20
    print("Before calling _a_function2, _a_global =", _a_global)
    _a_function2()
    print("After calling _a_function2, _a_global =", _a_global)

a_function()
print("In main namespace, _a_global =", _a_global)


**********

Output (first 500 chars):

**********
9
10
1
0
Updated x after reassignment: 10
Before calling a_function, outside the function, _a_global = 10
Before calling a_function, outside the function, _b_global = 15
Inside function, _a_global = 4
Inside function, _b_global = 9
Inside function, _a_local = 3
After calling a_function, outside, _a_global (still) = 10
After calling a_function, outside, _b_global (still) = 15
NameError: name '_a_local' is not defined
Inside function, _a_local = 4
Inside function, _a_global = 10
Outside function, 
**********
No errors.
======================================================================
Script: basic_io1.py

Contents:

**********
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/basic_io1.py", line 5, in <module>
    f = open('../sandbox/test.txt', 'r')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

**********
======================================================================
Script: cfexercises1.py

Contents:

**********
import sys


def foo_1(x=1):
    return x ** 0.5

def foo_2(x=1, y=1):
    if x > y:
        return x
    return y

def foo_3(x=1, y=1, z=1):
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]

def foo_4(x=1):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x=1): # a recursive function that calculates the factorial of x
    if x == 0 or x == 1:
        return 1
    elif x > 1:
        return x * foo_5(x - 1)
    else:
        return "Error negative numbers"

def foo_6(x=1): # Calculate the factorial of x without if statement
    if x < 0:
        return "Error negative numbers"
    else:
        facto = 1
        while x > 0:
            facto = facto * x
            x = x - 1
            return facto

def main(argv):

    if len(argv) == 4:
        try:
            x = int(argv[1])
            y = int(argv[2])
            z = int(argv[3])
        except ValueError:
            print("Error: x, y and z should be numbers")
            return 1

    else:
        print(" Now input your own values for x, y and z")
        x = input("Enter a number for x: ")
        if not x.isdigit():
            print("Error: x should be a number")
            return 1
        x = int(x)
        
        y = input("Enter a number for y: ")
        if not y.isdigit():
            print("Error: y should be a number")
            return 1
        y = int(y)
       
        z = input("Enter a number for z: ")
        if not z.isdigit():
            print("Error: z should be a number")
            return 1
        z = int(z)

        print(foo_1(x))
        print(foo_2(x,y))
        print(foo_3(x,y,z))
        print(foo_4(x))
        print(foo_5(x))
        print(foo_6(x))
        return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********

Output (first 500 chars):

**********
 Now input your own values for x, y and z
Enter a number for x: 
**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/cfexercises1.py", line 85, in <module>
    status = main(sys.argv)
             ^^^^^^^^^^^^^^
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/cfexercises1.py", line 58, in main
    x = input("Enter a number for x: ")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
EOFError: EOF when reading a line

**********
======================================================================
Script: debugme.py

Contents:

**********
def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except:
            print(f"This didn't work;{x = }; {y = }")
    return z

buggyfunc(20)

def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work;{x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }, {z = };")
    return z

buggyfunc(20)

**********

Output (first 500 chars):

**********
This didn't work;x = 20; y = 0
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y =
**********
No errors.
======================================================================
Script: boilerplate.py

Contents:

**********
def main(argv):
    print('This is a boilerplate') # NOTE: indented using two tabs or four spaces


# !/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)


**********

Output (first 500 chars):

**********
This is a boilerplate

**********
No errors.
======================================================================
Script: basic_io2.py

Contents:

**********
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/basic_io2.py", line 7, in <module>
    f = open('../sandbox/testout.txt','w')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

**********
======================================================================
Script: control_flow.py

Contents:

**********
# !/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
# docstrings are considered part of the running code (normal comments are
# stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor")
            return False
    print(f"{x} is a prime!")
    return True

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********

Output (first 500 chars):

**********
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is
**********
No errors.
======================================================================
Script: align_seqs_fasta.py

Contents:

**********
import os
import csv

with open('../data/DNA1.txt', 'r') as s1, open('../data/DNA2.txt', 'r') as s2:
    s1 = s1.read() 
    s2 = s2.read()
# Two example sequences to match
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(s1)
l2 = len(s2)
if l1 >= l2:
    s1 = s1
    s2 = s2
else:
    s1 = s2
    s2 = s1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences

my_best_align = []
my_best_score = 0

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = [("." * i + s2)] # store the best alignment
        my_best_score = z
    elif z == my_best_score:
        my_best_align.append(("." * i + s2)) # if same score, append this alignment
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

results_dir = '../results'
if not os.path.exists(results_dir):
    os.makedirs(results_dir)

results_file = os.path.join(results_dir, 'align.csv')

with open(results_file, 'w', newline='') as file:
    file = csv.writer(file)
    file.writerow([my_best_align])
    file.writerow([s1])
    file.writerow(["Best score:" + str(my_best_score)])
**********

Output (first 500 chars):

**********
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCG
**********
No errors.
======================================================================
Script: lc1.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 
latin_names = [bird[0] for bird in birds]
print (str(latin_names))

common_names = [bird[1] for bird in birds]
print (str(common_names))

mean_body_masses = [bird[2] for bird in birds]
print (str(mean_body_masses))

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latin_names = [] # create list for latin names
for bird in birds:
    latin_names.append(bird[0])
print (str(latin_names))

common_names = [] # create list for common names
for bird in birds:      
    common_names.append(bird[1])
print (str(common_names))   

mean_body_masses = [] # create list for mean body masses
for bird in birds:
    mean_body_masses.append(bird[2])
print (str(mean_body_masses))

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********

Output (first 500 chars):

**********
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********
No errors.
======================================================================
Script: sysargv.py

Contents:

**********
# !/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))

**********

Output (first 500 chars):

**********
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********
No errors.
======================================================================
Script: oaks_debugme.py

Contents:

**********
import csv
import sys
# import ipdb; ipdb.set_trace()
from fuzzywuzzy import fuzz


#Define function
def is_an_oak(name):
    # """ Returns True if name is starts with 'quercus' 
    # >>> is_an_oak('Quercus robur')
    # True
    # >>> is_an_oak('Acer pseudoplatanus')
    # False
    # """
    return fuzz.partial_ratio(name.lower(), 'quercus') >= 80

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    
    header = next(taxa)  # get the header line.
    if header != ['Genus', 'Species']:
        taxa = csv.reader(f)
    else:
        next(taxa)  # skip the header line.
    
    # for row in taxa:
    #     print(row)   # check reading the file correctly.


    csvwrite = csv.writer(g)
    csvwrite.writerow(['Genus', 'Species'])
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/ZhouYang_zy3425/week2/code/oaks_debugme.py", line 4, in <module>
    from fuzzywuzzy import fuzz
ModuleNotFoundError: No module named 'fuzzywuzzy'

**********
======================================================================
Script: tuple.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

birds_tuple = ()
for birds in birds: 
    birds_tuple += (f'Latin name: {birds[0]} Common name: {birds[1]} Mass: {birds[2]}',) 

print('\n'.join(birds_tuple))
**********

Output (first 500 chars):

**********
Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
Latin name: Delichon urbica Common name: House martin Mass: 19
Latin name: Junco phaeonotus Common name: Yellow-eyed junco Mass: 19.5
Latin name: Junco hyemalis Common name: Dark-eyed junco Mass: 19.6
Latin name: Tachycineata bicolor Common name: Tree swallow Mass: 20.2

**********
No errors.
======================================================================
Script: test_control_flow.py

Contents:

**********
# !/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
# docstrings are considered part of the running code (normal comments are
# stripped). Hence, you can access your docstrings at run time.
__author__ = 'Zhou Yang(zy3425@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x < 0:
        if -x % 2 == 0: 
            return f"{x} is Even!"
        else:
            return f"{x} is Odd!"
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(even_or_odd(10))
    print(even_or_odd(-5))
    print(even_or_odd(-2))

   
if (__name__ == "__main__"):
    status = main(sys.argv)
    doctest.testmod() 
**********

Output (first 500 chars):

**********
22 is Even!
33 is Odd!
10 is Even!
-5 is Odd!
-2 is Even!

**********
No errors.
======================================================================
Script: loops.py

Contents:

**********
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)

**********

Output (first 500 chars):

**********
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********
No errors.
======================================================================
Script: basic_csv.py

Contents:

**********
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])
**********

Output (first 500 chars):

**********
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagas
**********
No errors.
======================================================================
Script: align_seqs.py

Contents:

**********
import os
import csv

with open('../data/DNA1.txt', 'r') as s1, open('../data/DNA2.txt', 'r') as s2:
    s1 = s1.read() 
    s2 = s2.read()
# Two example sequences to match
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(s1)
l2 = len(s2)
if l1 >= l2:
    s1 = s1
    s2 = s2
else:
    s1 = s2
    s2 = s1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences

my_best_align = None
my_best_score = 0

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

results_dir = '../results'
if not os.path.exists(results_dir):
    os.makedirs(results_dir)

results_file = os.path.join(results_dir, 'align.csv')

with open(results_file, 'w', newline='') as file:
    file = csv.writer(file)
    file.writerow([my_best_align])
    file.writerow([s1])
    file.writerow(["Best score:" + str(my_best_score)])
**********

Output (first 500 chars):

**********
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCG
**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 23
Scripts successful: 18
Scripts with errors: 5
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

